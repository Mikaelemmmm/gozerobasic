// Code generated by goctl. DO NOT EDIT!
// Source: message.proto

//go:generate mockgen -destination ./message_mock.go -package messageclient -source $GOFILE

package messageclient

import (
	"context"

	"gozerobasic/app/services/message/message"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	ValidateCaptchaReq  = message.ValidateCaptchaReq
	ValidateCaptchaResp = message.ValidateCaptchaResp
	SendCaptchaReq      = message.SendCaptchaReq
	SendCaptchaResp     = message.SendCaptchaResp

	Message interface {
		SendCaptcha(ctx context.Context, in *SendCaptchaReq) (*SendCaptchaResp, error)
		ValidateCaptcha(ctx context.Context, in *ValidateCaptchaReq) (*ValidateCaptchaResp, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) SendCaptcha(ctx context.Context, in *SendCaptchaReq) (*SendCaptchaResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.SendCaptcha(ctx, in)
}

func (m *defaultMessage) ValidateCaptcha(ctx context.Context, in *ValidateCaptchaReq) (*ValidateCaptchaResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.ValidateCaptcha(ctx, in)
}
